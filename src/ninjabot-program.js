// generated from misc/ninjabot.js by misc/build.sh -- do not edit manually
export default '#!/usr/bin/env node\n' +
  `'use strict';const f=require("child_process"),g=console.error.bind(console),h=process.stdin,k=Buffer.from("ninja: no work to do","utf8");h.setRawMode&&h.setRawMode(!0);h.resume();h.on("end",function(){process.exit(0)});m(h,n,p);function q(a,e,b){return b?r(a,["-t","clean"]).then(()=>r(a,e)):r(a,e)}\n` +
  'function r(a,e){return new Promise((b,l)=>{let c=f.spawn("ninja",e,{cwd:a,stdio:["ignore","pipe","inherit"]}),d=!0;c.stdout.on("data",a=>{-1!=a.indexOf(k)&&(d=!1);process.stderr.write(a)});c.on("error",b=>{"ENOENT"==b.code&&(b={message:`${a} is not a directory`,code:"ENOENT"});l(b);g("ninja: error:",b)});c.on("exit",a=>{0==a?b(d):l("ninja error")})})}function t(a,e){e.then(b=>{u({response:a,result:b})}).catch(b=>{u({response:a,error:b.message||String(b)})})}\n' +
  'function n(a){"build"==a.request?t(a.rid,q(a.dir,a.targets,a.clean)):"clean"==a.request?t(a.rid,r(a.dir,["-t","clean"])):u({response:a.rid,error:`invalid ninjabot command: ${a.request}`})}function u(a){process.stdout.write(JSON.stringify(a)+"\\n")}function m(a,e,b){v(a,a=>{let c;try{c=JSON.parse(a)}catch(d){return b("invalid data",{line:a})}e(c)})}\n' +
  'function v(a,e){let b=[];a.on("end",()=>{b=[]});a.on("data",a=>{var c=a.indexOf(10);if(-1==c)b.push(a);else{for(var d=0;-1<c;)d=a.subarray(d,c),0<b.length&&(b.push(d),d=Buffer.concat(b),b=[]),e(d.toString("utf8")),d=c+1,c=a.indexOf(10,d);c<a.length-1&&b.push(a.subarray(d))}})}function p(a){g(a);process.exit(1)};\n'
